import os
from pwn import *
import base64

code_data = b'JXgAAAAAAAAAAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAABAAAAJVUAAAAAAAD/AAAAJWsAAAAAAAABAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAABAAAAJVUAAAAAAAAAAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAACAAAAJVUAAAAAAAA/AAAAJWsAAAAAAAACAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAACAAAAJVUAAAAAAAAAAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAACAAAAJVUAAAAAAAAEAAAAJWkAAAAAAAAAAAAAJWMAAAAAAAAAAAAAJWsAAAAAAAABAAAAJUQAAAAAAAAAAAAAJWsAAAAAAAACAAAAJVUAAAAAAAAEAAAAJWkAAAAAAAAAAAAAJWIAAAAAAAAAAAAAJW4AAAAAAAAAAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAADAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAAEAAAAJVUAAAAAAAA/AAAAJWsAAAAAAAAEAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAAEAAAAJVUAAAAAAAAAAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJVUAAAAAAAAAAAAAJVkAAAAAAAAFAAAAJWsAAAAAAAAEAAAAJWsAAAAAAAAFAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAA7AAAAJWcAAAAAAAA8AAAAJWsAAAAAAAADAAAAJUMAAAAAAAAAAAAAJXkAAAAAAAAAAAAAJWsAAAAAAAAFAAAAJVUAAAAAAAABAAAAJUEAAAAAAAAAAAAAJVkAAAAAAAAFAAAAJU4AAAAAAAAuAAAAJW4AAAAAAAAAAAAAJWEAAAAAAAAAAAAAJWsAAAAAAAAFAAAAJSNYAAAAAAAAAAAAJWsAAAAAAAAFAAAAJSNWAAAAAAAAAAAAJVUAAAAAAAD/AAAAJU0AAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAAFAAAAJSNWAAAAAAAAAAAAJW4AAAAAAAAAAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAAAAAAAJVUAAAAAAAABAAAAJWsAAAAAAAAAAAAAJU0AAAAAAAAAAAAAJVQAAAAAAABPAAAAJWcAAAAAAAABAAAAJU4AAAAAAABHAAAAJVUAAAAAAAACAAAAJWsAAAAAAAAAAAAAJU0AAAAAAAAAAAAAJVQAAAAAAABVAAAAJWcAAAAAAAAgAAAAJU4AAAAAAABHAAAAJVUAAAAAAAADAAAAJWsAAAAAAAAAAAAAJU0AAAAAAAAAAAAAJVQAAAAAAABbAAAAJWcAAAAAAABuAAAAJU4AAAAAAABHAAAAJVUAAAAAAAAEAAAAJWsAAAAAAAAAAAAAJU0AAAAAAAAAAAAAJVQAAAAAAABhAAAAJWcAAAAAAACNAAAAJU4AAAAAAABHAAAAJVUAAAAAAAAFAAAAJWsAAAAAAAAAAAAAJU0AAAAAAAAAAAAAJVQAAAAAAABnAAAAJWcAAAAAAACyAAAAJU4AAAAAAABHAAAAJVUAAAAAAAAGAAAAJWsAAAAAAAAAAAAAJU0AAAAAAAAAAAAAJVQAAAAAAABtAAAAJWcAAAAAAADRAAAAJU4AAAAAAABHAAAAJXgAAAAAAAAAAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAABAAAAJVUAAAAAAAD/AAAAJWsAAAAAAAABAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAABAAAAJVUAAAAAAAAAAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAACAAAAJVUAAAAAAAA/AAAAJWsAAAAAAAACAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAACAAAAJVUAAAAAAAAAAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAACAAAAJVUAAAAAAAAEAAAAJWkAAAAAAAAAAAAAJWMAAAAAAAAAAAAAJWsAAAAAAAABAAAAJUgAAAAAAAAAAAAAJWsAAAAAAAACAAAAJVUAAAAAAAAEAAAAJWkAAAAAAAAAAAAAJWIAAAAAAAAAAAAAJW4AAAAAAAAAAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAADAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAAEAAAAJVUAAAAAAAA+AAAAJWsAAAAAAAAEAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAAEAAAAJVUAAAAAAAAAAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJVUAAAAAAAAAAAAAJVkAAAAAAAAFAAAAJWsAAAAAAAAEAAAAJWsAAAAAAAAFAAAAJXIAAAAAAAAAAAAAJVMAAAAAAACxAAAAJWcAAAAAAAA8AAAAJWsAAAAAAAADAAAAJUcAAAAAAAAAAAAAJWsAAAAAAAAFAAAAJSNYAAAAAAAAAAAAJWsAAAAAAAAFAAAAJSNWAAAAAAAAAAAAJVUAAAAAAAD/AAAAJU0AAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAAFAAAAJSNWAAAAAAAAAAAAJXkAAAAAAAAAAAAAJWsAAAAAAAAFAAAAJVUAAAAAAAABAAAAJUEAAAAAAAAAAAAAJVkAAAAAAAAFAAAAJU4AAAAAAACbAAAAJW4AAAAAAAAAAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAABAAAAJVUAAAAAAAD/AAAAJWsAAAAAAAABAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAABAAAAJVUAAAAAAAAAAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAACAAAAJVUAAAAAAAA/AAAAJWsAAAAAAAACAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAACAAAAJVUAAAAAAAAAAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAACAAAAJVUAAAAAAAAEAAAAJWkAAAAAAAAAAAAAJWMAAAAAAAAAAAAAJWsAAAAAAAABAAAAJUYAAAAAAAAAAAAAJWsAAAAAAAACAAAAJVUAAAAAAAAEAAAAJWkAAAAAAAAAAAAAJWIAAAAAAAAAAAAAJW4AAAAAAAAAAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAADAAAAJWEAAAAAAAAAAAAAJVkAAAAAAAAEAAAAJVUAAAAAAAA/AAAAJWsAAAAAAAAEAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAAEAAAAJVUAAAAAAAAAAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAAAAAAAJVUAAAAAAAAAAAAAJVkAAAAAAAAFAAAAJWsAAAAAAAAEAAAAJWsAAAAAAAAFAAAAJXIAAAAAAAAAAAAAJVMAAAAAAAD1AAAAJWcAAAAAAAA8AAAAJWsAAAAAAAADAAAAJUUAAAAAAAAAAAAAJWsAAAAAAAAFAAAAJSNYAAAAAAAAAAAAJWsAAAAAAAAFAAAAJSNWAAAAAAAAAAAAJVUAAAAAAAD/AAAAJU0AAAAAAAAAAAAAJVMAAAAAAAAAAAAAJWsAAAAAAAAFAAAAJSNWAAAAAAAAAAAAJXkAAAAAAAAAAAAAJWsAAAAAAAAFAAAAJVUAAAAAAAABAAAAJUEAAAAAAAAAAAAAJVkAAAAAAAAFAAAAJU4AAAAAAADfAAAAJW4AAAAAAAAAAAAAJXgAAAAAAAAAAAAAJXgAAAAAAAAAAAAAJXgAAAAAAAAAAAAAJXgAAAAAAAAAAAAA'
encoded_code = base64.b64decode(code_data)

# 改字典记录各个指令对应的汇编代码(粗)
code_dict = {
    'O': 'freeTheStack',
    'A': 'add',
    'C': 'and',
    'D': 'array_and',
    'E': 'or',
    'F': 'array_or',
    'G': 'xor',
    'H': 'array_xor',
    'i': 'mul',
    'J': 'shl',
    'K': 'shr',
    'r': 'cmp_greater',     # SP = SP > SP - 1
    'M': 'cmp_equal',       # SP = SP == SP - 1
    'N': 'jmp',             
    'S': 'jnz',             # jmp if SP != 0
    'T': 'jz',              # jmp if SP == 0
    'U': 'push(int)',
    'V': 'load_sth',
    'k': 'push',            # push from register
    'X': 'store_sth',
    'Y': 'pop',             # pop to register
    'y': 'pop printf()',
    'a': 'push STDIN',
    'b': 'write2stdout',
    'c': 'read2stdin',
    'f': 'pop_ NULL',
    'g': 'call',
    'n': 'ret',
    'x': 'exit'
}

# 该字典记录各个指令是否包含参数
code_dict_is_argue = {
    'O': False,#'freeTheStack',
    'A': False,#'add',
    'C': False,#'and',
    'D': False,#'array_and',
    'E': False,#'or',
    'F': False,#'array_or',
    'G': False,#'xor',
    'H': False,#'array_xor',
    'i': False,#'mul',
    'J': False,#'shl',
    'K': False,#'shr',
    'r': False,#'cmp_greater',
    'M': False,#'cmp_equal',
    'N': True,#'jmp',
    'S': True,#'jnz',
    'T': True,#'jz',
    'U': True,#'push',
    'V': True,#'load_sth',
    'k': True,#'push_sth',
    'X': True,#'store_sth',
    'Y': True,#'pop2',
    'y': True,#'pop2printf',
    'a': False,#'pushTheStdin',
    'b': False,#'write2stdout',
    'c': False,#'read2stdin',
    'f': False,#'pop2null',
    'g': True,#'call',
    'n': False,#'ret',
    'x': False,#'exit'
}

# 函数表
function_table  = {
    1:      "choice_1",
    32:     "choice_2",
    60:     "function_1",
    71:     "main",
    110:    "choice_3",
    141:    "choice_4",
    178:    "choice_5",
    209:    "choice_6",
}

# 符号表ss
symbols         = {
    0:      "EXIT"
}

for i in range(0, len(encoded_code), 12):
    a               = encoded_code[i: i + 12]
    code            = a[ :8].replace(b'#', b'').decode()[:2]
    decoded_code    = code_dict[code[1]]
    args            = a[8: ]
    cur_line        = i // 12

    cur_line_print  = str(cur_line).ljust(4, ' ')
    cur_code        = decoded_code + ' ' + (str(u32(args)) if code_dict_is_argue[code[1]] else '')

    if cur_line in function_table:
        print(cur_line_print)
        print(cur_line_print, f'; function { function_table[cur_line] }')
        STACK = []

    if (decoded_code == 'jnz' or decoded_code == 'call') and (u32(args) in function_table or u32(args) in symbols):
        cur_code = decoded_code + ' ' + ( symbols[u32(args)] if u32(args) in symbols else function_table[u32(args)] )
    elif decoded_code == 'push' or decoded_code == 'pop':
        cur_code = f'{ decoded_code } reg({ u32(args) })'  
    elif decoded_code == 'push(int)':
        cur_code = f'push { u32(args) }'

    print(cur_line_print, cur_code.split(' ')[0].ljust(8, ' ') + cur_code.split(' ')[1].ljust(16, ' '))
